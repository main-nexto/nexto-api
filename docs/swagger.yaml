---
swagger: "2.0"
info:
  title: "Nexto Courses"
  description: Nexto Courses API.
  version: 2.0.0
basePath: "/"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /courses:
    get:
      operationId: "getAllCourses"
      parameters:
      - name: "name"
        in: "query"
        description: "name of the course."
        required: false
        type: "string"
      responses:
        200:
          description: "Get all courses"
      x-swagger-router-controller: "course"
    post:
      operationId: "postCourse"
      parameters:
      - in: "body"
        name: "course"
        description: "Course to save"
        required: false
        schema:
          $ref: "#/definitions/Course"
      responses:
        201:
          description: "Course was correctly created"
      x-swagger-router-controller: "course"
  /courses/{id}/join:
    put:
      operationId: "joinCourse"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the course."
        required: true
        type: "string"
      responses:
        200:
          description: "Join course was successful"
        500:
          description: "Internal server error"
      x-swagger-router-controller: "course"
  /courses/{id}:
    get:
      operationId: "getCoursesById"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the course."
        required: true
        type: "string"
      responses:
        200:
          description: "Course was fetched correctly"
        404:
          description: "Course wasn't found"
      x-swagger-router-controller: "course"
    put:
      operationId: "putCoursesById"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the course."
        required: true
        type: "string"
      - in: "body"
        name: "course"
        description: "Course to replace"
        required: false
        schema:
          $ref: "#/definitions/Course"
      responses:
        200:
          description: "Course was replaced."
        500:
          description: "Internal server error"
      x-swagger-router-controller: "course"
    delete:
      operationId: "deleteCoursesById"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the course."
        required: true
        type: "string"
      - in: "body"
        name: "course"
        description: "Name of the course to delete"
        required: false
        schema:
          $ref: "#/definitions/Course"
      responses:
        204:
          description: "Course was deleted"
        404:
          description: "Course missing"
      x-swagger-router-controller: "course"
  /communities:
    get:
      operationId: "getAllCommunities"
      parameters:
      - name: "name"
        in: "query"
        description: "name of the community."
        required: false
        type: "string"
      responses:
        200:
          description: "Get all communities"
      x-swagger-router-controller: "community"
    post:
      operationId: "postCommunity"
      parameters:
      - in: "body"
        name: "community"
        description: "Name of the community to save"
        required: false
        schema:
          $ref: "#/definitions/Community"
      responses:
        201:
          description: "Community was correctly created"
      x-swagger-router-controller: "community"
  /communities/{id}:
    get:
      operationId: "getCommunitiesById"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the community."
        required: true
        type: "string"
      responses:
        200:
          description: "Community was fetched correctly"
        404:
          description: "Community wasn't found"
      x-swagger-router-controller: "community"
    put:
      operationId: "putCommunitiesById"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the community."
        required: true
        type: "string"
      - in: "body"
        name: "community"
        description: "Name of the community to replace"
        required: false
        schema:
          $ref: "#/definitions/Community"
      responses:
        200:
          description: "Community was replaced."
        500:
          description: "Internal server error"
      x-swagger-router-controller: "community"
    delete:
      operationId: "deleteCommunitiesById"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the community."
        required: true
        type: "string"
      - in: "body"
        name: "community"
        description: "Name of the community to delete"
        required: false
        schema:
          $ref: "#/definitions/Community"
      responses:
        204:
          description: "Community was deleted"
        404:
          description: "Community missing"
      x-swagger-router-controller: "community"
definitions:
  Course:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The name of the course"
      description:
        type: "string"
        description: "The description of the course"
      author:
        type: "string"
        description: "The author of the course"
      imagePath:
        type: "string"
        description: "The background image path of the course"
      avatarPath:
        type: "string"
        description: "The avatar image path of the course"
      tags:
        type: "array"
        description: "The tags related to the course"
        items:
            type: string
      duration:
        type: "integer"
        description: "The duration in hours of the course"
      publishDate:
        type: "integer"
        description: "The publish date in timestamp format of the course"
      price:
        type: "number"
        format: "double"
        description: "The price in R$ of the course"
      status:
        type: "integer"
        description: "The status of the course. Not purchased = 0, Purchased = 1"
        enum: [0, 1]
    required:
      - name
      - author

  Community:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The name of the community"
      author:
        type: "string"
        description: "The author of the community"
      avatarPath:
        type: "string"
        description: "The image path of the community"
    required:
      - name
      - author

